import sys
from queue import Queue
from threading import Thread

from populate_cve import populate_cve
from update_cve import update_cve

class Worker(Thread):
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()
    def run(self):
        while True:
            func, args, kargs = self.tasks.get()
            try:
                func(*args, **kargs)
            except Exception as e:
                print(e)
            finally:
                self.tasks.task_done()

class ThreadPool:
    def __init__(self, num_threads):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads):
            Worker(self.tasks)
    def add_task(self, func, *args, **kargs):
        self.tasks.put((func, args, kargs))
    def wait_completion(self):
        self.tasks.join()

if __name__ == '__main__':
    pool = ThreadPool(2)
    pool.add_task(populate_cve)
    pool.add_task(update_cve)
    pool.wait_completion()
    print('complete')