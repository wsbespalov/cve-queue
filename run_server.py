import sched
import threading
import time
from datetime import datetime

from pop_cve import populate
from settings import *
from threadpool import ThreadPool
from upd_cve import update
from cache import *

class PeriodicTask(object):
    """Scheduler for run periodic jobs"""

    def __init__(self, period_in_sec, task, task_arguments=(), repetitions=None):
        """
        Class constructor.
        """
        self.repetitions = None
        self.scheduler = None
        self.next_event = None
        # Create thread
        self.thread = threading.Thread(
            target=self.thread_entry_point,
            args=(
                period_in_sec,
                task,
                task_arguments,
                repetitions
            )
        )
        self.thread.start()

    def thread_entry_point(self, period_in_sec, task, task_arguments, repetitions):
        """
        Job thread entry point.
        """
        self.repetitions = repetitions
        self.scheduler = sched.scheduler(time.time, time.sleep)
        self.periodic(period_in_sec, task, task_arguments)
        self.scheduler.run()

    def periodic(self, delay_in_sec, task, task_arguments):
        """
        Schedule another recursive event.
        """
        # Create next event
        self.next_event = self.scheduler.enter(
            delay_in_sec,
            1,
            self.periodic,
            (
                delay_in_sec,
                task,
                task_arguments
            )
        )

        stop_task = task(*task_arguments)

        if stop_task is True:
            self.stop()

        if self.repetitions is not None:
            self.repetitions = self.repetitions - 1
            if self.repetitions == 0:
                self.stop()

    def stop(self):
        """
        Stop job.
        """
        self.scheduler.cancel(self.next_event)

def now():
    """
    Get current time in string format.
    """
    return datetime.now().strftime("%H:%M:%S")

def job():
    """
    Updater job for periodic repetitions.
    """
    print('[+] PUT UPDATER INTO THREADPOOL AT [%s]' % (now()))
    pool = ThreadPool(POOL_COUNT)
    pool.add_task(populate, None)
    pool.wait_completion()
    print('[+] COMPLETE POPULATE AT [%s]' % (now()))
    pool.add_task(update, None)
    pool.wait_completion()
    print('[+] COMPLETE UPDATE AT [%s]' % (now()))
    del pool
    cache.rpush(
        'incomingQueue',
        'StartUpdateVulnerabilityDataBase')


def main():
    """
    Server entry point.
    """
    print('[!] START PERIODIC TASK AT [%s]' % (now()))
    updater_task = PeriodicTask(
        period_in_sec=PERIOD_IN_SEC,
        task=job,
        repetitions=REPETITIONS
    )

if __name__ == '__main__':
    main()