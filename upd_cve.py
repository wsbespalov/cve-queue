import datetime
import sys
from xml.sax import make_parser

from dateutil.parser import parse as parse_datetime

from getfile import getFile
from hnd_cve import CVEHandler
from mongo import *
from progressbar import progressbar
from settings import *
from threadpool import ThreadPool

pool = ThreadPool(4)

def update(args=None):
    start = datetime.datetime.now()
    # get the 'modified' file
    getfile = FILE_PREFIX + FILE_MODIFIED + FILE_SUFFIX
    try:
        (f, r) = getFile(SOURCE_CVE + getfile)
    except:
        return "Cannot open url: %s" % (SOURCE_CVE + getfile)
    i = get_info("cves")
    last_modified = parse_datetime(r.headers['last-modified'], ignoretz=True)
    if i is not None:
        if last_modified == i['last-modified']:
            print("Not modified")
            sys.exit(0)
    set_collection_update("cves", last_modified)
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in ch.cves:
        x = get_cve(item['id'])
        if x:
            if 'cvss' not in item:
                item['cvss'] = None
            if 'cwe' not in item:
                item['cwe'] = DEFAULTVALUE['cwe']
            pool.add_task(update_cve, item)
        else:
            pool.add_task(insert_cve, item)
    # get the 'recent' file
    getfile = FILE_PREFIX + FILE_RECENT + FILE_SUFFIX
    try:
        (f, r) = getFile(SOURCE_CVE + getfile)
    except:
        return "Cannot open url: %s" % (SOURCE_CVE + getfile)
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in progressbar(ch.cves):
        x = get_cve(item['id'])
        if x:
            if 'cvss' not in item:
                item['cvss'] = None
            else:
                item['cvss'] = float(item['cvss'])
            if 'cwe' not in item:
                item['cwe'] = DEFAULTVALUE['cwe']
                pool.add_task(update_cve, item)
        else:
            pool.add_task(insert_cve, item)
    pool.wait_completion()
    end = datetime.datetime.now()
    delta = end - start
    print('complete: %s' % delta)

if __name__ == '__main__':
    update()
