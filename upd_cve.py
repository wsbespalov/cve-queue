import bz2
import datetime
import gzip
import sys
import urllib.request as req
import zipfile
from io import BytesIO
from xml.sax import make_parser

import pymongo
from dateutil.parser import parse as parse_datetime

from hnd_cve import CVEHandler
from threadpool import ThreadPool

mongo = pymongo.MongoClient(
    host='localhost',
    port=27017,
    connect=True)["cvedb"]
colINFO = mongo['info']
colCVE = mongo['cves']

file_prefix = "nvdcve-2.0-"
file_suffix = ".xml.gz"
file_mod = "modified"
file_rec = "recent"

def setColUpdate(collection, date):
  colINFO.update({"db": collection}, {"$set": {"last-modified": date}}, upsert=True)

def setColInfo(collection, field, data):
  colINFO.update({"db": collection}, {"$set": {field: data}}, upsert=True)

def insertCVE(cve):
  colCVE.insert(cve)

def updateCVE(cve):
  colCVE.update({"id": cve['id']}, {"$set": {"cvss": cve['cvss'], "summary": cve['summary'], "references": cve['references'],
                                             "cwe": cve['cwe'], "vulnerable_configuration": cve['vulnerable_configuration'],
                                             "vulnerable_configuration_cpe_2_2": cve['vulnerable_configuration_cpe_2_2'], 'last-modified': cve['Modified']}})

def getCVE(id, collection=None):
  col=colCVE if not collection else mongo[collection]
  return sanitize(col.find_one({"id": id}))

def getInfo(collection):
  return sanitize(
      colINFO.find_one(
          {"db": collection}))

date = datetime.datetime.now()
year = date.year + 1
defaultvalue = {}
defaultvalue['cwe'] = "Unknown"
http_proxy = None
cveStartYear = 2017
source = "https://static.nvd.nist.gov/feeds/xml/cve/"

def progressbar(it, prefix="Preparing ", size=50):
    count = len(it)

    def _show(_i):
        if count != 0 and sys.stdout.isatty():
            x = int(size * _i / count)
            sys.stdout.write("%s[%s%s] %i/%i\r" % (prefix, "#" * x, " " * (size - x), _i, count))
            sys.stdout.flush()

    _show(0)
    for i, item in enumerate(it):
        yield item
        _show(i + 1)
    sys.stdout.write("\n")
    sys.stdout.flush()

def getFile(getfile, unpack=True):
    if http_proxy:
        proxy = req.ProxyHandler({'http': http_proxy, 'https': http_proxy})
        auth = req.HTTPBasicAuthHandler()
        opener = req.build_opener(proxy, auth, req.HTTPHandler)
        req.install_opener(opener)
    response = req.urlopen(getfile)
    data = response
    if unpack:
        if   'gzip' in response.info().get('Content-Type'):
            buf = BytesIO(response.read())
            data = gzip.GzipFile(fileobj=buf)
        elif 'bzip2' in response.info().get('Content-Type'):
            data = BytesIO(bz2.decompress(response.read()))
        elif 'zip' in response.info().get('Content-Type'):
            fzip = zipfile.ZipFile(BytesIO(response.read()), 'r')
            if len(fzip.namelist())>0:
                data=BytesIO(fzip.read(fzip.namelist()[0]))
    return (data, response)

def sanitize(x):
    if type(x)==pymongo.cursor.Cursor:
        x=list(x)
    if type(x)==list:
        for y in x:
          sanitize(y)
    if x and  "_id" in x:
        x.pop("_id")
    return x


pool = ThreadPool(4)

def update():
    getfile = file_prefix + file_mod + file_suffix
    try:
        (f, r) = getFile(source + getfile)
    except:
        sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (
        source + getfile))
    i = getInfo("cves")
    last_modified = parse_datetime(r.headers['last-modified'], ignoretz=True)
    if i is not None:
        if last_modified == i['last-modified']:
            print("Not modified")
            sys.exit(0)
    setColUpdate("cves", last_modified)
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in ch.cves:
        # check if the CVE already exists.
        x = getCVE(item['id'])
        # if so, update the entry.
        if x:
            if 'cvss' not in item:
                item['cvss'] = None
            if 'cwe' not in item:
                item['cwe'] = defaultvalue['cwe']
            # updateCVE(item)
            pool.add_task(updateCVE, item)
        else:
            # insertCVE(item)
            pool.add_task(insertCVE, item)
    # get the 'recent' file
    getfile = file_prefix + file_rec + file_suffix
    try:
        (f, r) = getFile(source + getfile)
    except:
        sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (
        source + getfile))
    parser = make_parser()
    ch = CVEHandler()
    parser.setContentHandler(ch)
    parser.parse(f)
    for item in progressbar(ch.cves):
        # check if the CVE already exists.
        x = getCVE(item['id'])
        # if so, update the entry.
        if x:
            print("item found : " + item['id'])
            if 'cvss' not in item:
                item['cvss'] = None
            else:
                item['cvss'] = float(item['cvss'])
            if 'cwe' not in item:
                item['cwe'] = defaultvalue['cwe']
            updateCVE(item)
        # if not, create it.
        else:
            insertCVE(item)

if __name__ == '__main__':
    start = datetime.datetime.now()
    update()
    pool.wait_completion()
    end = datetime.datetime.now()
    delta = end - start
    print('complete: %s' % delta)